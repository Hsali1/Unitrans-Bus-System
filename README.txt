TEAM ACDC

MEMBERS:
    -Hassan:
        UserID      =   -
        StudentID   =   -
    -Niyant:
        UserID      =   -
        StudentID   =   -

HOW TO COMPILE AND RUN:
    Run $make
    -run $./ecs36b_hw6_driver to look at the exceptions.
    -run $./test_ThingPerson to look at the executable with no exceptions.

DESCRIPTION:

    In this hw we created a new file called ecs36b_hw6_driver.cpp
    This new file uses our old test_ThingPerson.cpp as a template. 
    The only difference in this new file is that for each of the 4 records, we "break" the code in the try block to generate an exception.

    Record 1 checks the following condition:

        1. Missing any essential key-value pairs in the input JSON, for example, a GPS location JSON doesn’t have the latitude component of the DD format. [Message – “Missing <attribute-name>”]

    Record 2 checks the following condition:

        2. The value type is unexpected/mismatched, for example, the value of the “latitude” key is not a Double or Float, instead, it is encoded as a String. [Message – “<attribute-name> must be <correct-type>”]

    Record 3 checks the following condition:

        3. The structure of the input JSON is incorrect. For example, we are expecting a JSON object but it is an Array or any non-object type. This might include anything not generated by your own dump2JSON() function. [Message – “Input JSON is not an Array”]

    Record 4 checks the following condition:

        4. Very unusual events are detected (this is a new part). We now require you to add a new attribute “hidden”, a String. If the JSON2Object function detects the “hidden” key-value pair AND the String is equal to “SOS” or “HELP”, then, your program will throw an exception as well. [Message – “A Critical Hidden detected”]

    If you want to look at how the program would look without any errors, run $./test_ThingPerson.
        This is the code from our homework 4 and showcases dump2JSON and JSON2Object features of the code. I have wrapped each record around try and catch blocks and they output the expected results.
    
    In ecs36b_hw6_driver.cpp we commented out a lot of std::cout commands so it does not clutter the terminal.